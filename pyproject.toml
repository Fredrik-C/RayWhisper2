[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "raywhisper"
version = "0.1.0"
description = "Cross-platform voice-to-text tool with RAG-enhanced transcription"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Fredrik Claesson", email = "fredrik@raytail.se"}
]
keywords = ["speech-to-text", "whisper", "rag", "voice-recognition", "transcription"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]

dependencies = [
    "numpy>=2.0.0",  # NumPy 2.x for Python 3.14 compatibility
    "faster-whisper>=1.2.0",
    "chromadb>=0.5.0",
    "sentence-transformers>=3.1.0",
    "sounddevice>=0.4.7",
    "pynput>=1.7.7",
    "pydantic>=2.6.0",
    "pydantic-settings>=2.3.0",
    "python-dotenv>=1.0.1",
    "loguru>=0.7.2",
    "click>=8.1.0",
    "pyperclip>=1.8.2",
    "pyyaml>=6.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "pytest-benchmark>=4.0.0",
    "mypy>=1.11.0",
    "ruff>=0.6.0",
    "pre-commit>=3.7.0",
    "memory-profiler>=0.61.0",
]
multilingual = [
    "FlagEmbedding>=1.2.10",
]

[project.scripts]
raywhisper = "raywhisper.presentation.cli:cli"

[tool.setuptools.packages.find]
where = ["src"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --cov=raywhisper --cov-report=term-missing --cov-report=html"
testpaths = ["tests"]
pythonpath = ["src"]

[tool.coverage.run]
source = ["src/raywhisper"]
omit = ["*/tests/*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
strict_optional = true
strict_equality = true
show_error_codes = true
show_column_numbers = true

[[tool.mypy.overrides]]
module = [
    "faster_whisper.*",
    "chromadb.*",
    "sentence_transformers.*",
    "sounddevice.*",
    "pynput.*",
    "pyperclip.*",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py311"
line-length = 100
indent-width = 4

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "RUF",    # Ruff-specific rules
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "B008",   # do not perform function calls in argument defaults
    "B904",   # raise from
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports
"tests/**/*.py" = ["S101"]  # assert usage

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

